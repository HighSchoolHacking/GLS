/**
 * A container for banned keywords for variable names.
 */
export class BannedKeywordsBag {
    /**
     * Banned keywords, keyed in alphabetical order.
     */
    private bannedKeywords: Set<string>;

    /**
     * Initalizes a new instance of the BannedKeywordsBag class.
     */
    public constructor() {
        this.bannedKeywords = new Set([
            "BEGIN",
            "END",
            "___ENCODING__",
            "___FILE__",
            "___LINE__",
            "abstract",
            "acos",
            "add",
            "alias",
            "and",
            "any",
            "array",
            "as",
            "asin",
            "assert",
            "async",
            "atan",
            "await",
            "base",
            "bool",
            "boolean",
            "break",
            "byte",
            "case",
            "catch",
            "char",
            "checked",
            "class",
            "close",
            "const",
            "constructor",
            "continue",
            "cos",
            "debugger",
            "decimal",
            "declare",
            "def",
            "default",
            "defined",
            "del",
            "delegate",
            "delete",
            "do",
            "double",
            "e",
            "elif",
            "else",
            "elsif",
            "ensure",
            "enum",
            "event",
            "except",
            "exec",
            "exp",
            "explicit",
            "export",
            "extends",
            "extern",
            "fabs",
            "false",
            "final",
            "finally",
            "fixed",
            "floor",
            "for",
            "foreach",
            "from",
            "function",
            "get",
            "global",
            "goto",
            "hasOwnProperty",
            "if",
            "implements",
            "implicit",
            "import",
            "in",
            "input",
            "instanceof",
            "interaface",
            "interface",
            "internal",
            "is",
            "lambda",
            "let",
            "lock",
            "log",
            "log10",
            "long",
            "module",
            "namespace",
            "native",
            "new",
            "next",
            "nil",
            "not",
            "null",
            "number",
            "object",
            "of",
            "open",
            "operator",
            "or",
            "out",
            "override",
            "package",
            "params",
            "partial",
            "pass",
            "pi",
            "print",
            "private",
            "protected",
            "public",
            "raise",
            "range",
            "readonly",
            "redo",
            "ref",
            "remove",
            "require",
            "rescue",
            "retry",
            "return",
            "sbyte",
            "sealed",
            "self",
            "set",
            "short",
            "sin",
            "sizeof",
            "sqrt",
            "stackalloc",
            "static",
            "strictfp",
            "string",
            "struct",
            "super",
            "switch",
            "symbol",
            "synchronized",
            "tan",
            "then",
            "this",
            "throw",
            "throwas",
            "throws",
            "transient",
            "true",
            "try",
            "type",
            "typeof",
            "uint",
            "ulong",
            "unchecked",
            "undef",
            "unless",
            "unsafe",
            "until",
            "ushort",
            "using",
            "value",
            "var",
            "virtual",
            "void",
            "volatile",
            "when",
            "where",
            "while",
            "with",
            "write",
            "yield",
            "zeros"
        ]);
    }

    /**
     * Returns whether the variable name is valid.
     *
     * @param name  A variable name.
     * @returns A boolean determining the validity of the variable name.
     */
    public validateName(alias: string): boolean {

        return this.bannedKeywords.has(alias);
    }
}
