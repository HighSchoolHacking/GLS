-
file start : Fibonacci Generation CachingGenerator
    import local : Fibonacci Generation Generator use IGenerator

    class start : export CachingGenerator implements IGenerator
        member variable declare : private Cache { dictionary type : int int }

        constructor start : public CachingGenerator
            operation : { member variable : private { this } Cache } equals { dictionary new : int int }
        constructor end

        member function declare start : public Generate int index int
            if start : { operation : index (less than) 2 }
                return : index
            if end

            variable : one int { member function : public { this } Generate { operation : index minus 1 } }
            variable : two int { member function : public { this } Generate { operation : index minus 2 } }
            variable : result int { operation : one plus two }

            dictionary set : { member variable : private { this } Cache } index result

            return : result
        member function declare end

        member function declare start : public IsCached boolean index int
            return : { dictionary contains key : { member variable : private { this } Cache } index }
        member function declare end
    class end
file end
-
