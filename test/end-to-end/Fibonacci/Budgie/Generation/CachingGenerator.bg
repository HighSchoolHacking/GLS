file start : Fibonacci Generation CachingGenerator
    import local : Fibonacci Generation IGenerator types IGenerator

    class start : export CachingGenerator implements IGenerator
        member variable declare : private Cache { dictionary type : int int }

        constructor start : public CachingGenerator
            operation : { member variable : private { this } Cache } equals { dictionary new : int int }
        constructor end

        member function declare start : public Generate int index int
            if start : { operation : { variable : index } (less than) 2 }
                return : { variable : index }
            if end

            variable declare : one int { member function : public { this } Generate { operation : { variable : index } minus 1 } }
            variable declare : two int { member function : public { this } Generate { operation : { variable : index } minus 2 } }
            variable declare : result int { operation : { variable : one } plus { variable : two } }

            dictionary set : { member variable : private { this } Cache } { variable : index } { variable : result }

            return : { variable : result }
        member function declare end

        member function declare start : public IsCached boolean index int
            return : { dictionary contains key : { member variable : private { this } Cache } { variable : index } }
        member function declare end
    class end
file end
